>>SOURCE FREE
IDENTIFICATION DIVISION.
PROGRAM-ID. CREATE-PROFILE.
AUTHOR. Gemini.
DATE-WRITTEN. 11/09/2025.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT PROFILES-FILE ASSIGN TO "profiles.txt"
        ORGANIZATION IS LINE SEQUENTIAL
        FILE STATUS IS WS-PROFILES-STATUS.

    *> These files are for reading user input and logging output
    SELECT INPUT-FILE ASSIGN TO "InCollege-Input.txt"
        ORGANIZATION IS LINE SEQUENTIAL.

    SELECT OUTPUT-FILE ASSIGN TO "InCollege-Output.txt"
        ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD  PROFILES-FILE.
01  PROFILE-RECORD      PIC X(250).

FD  INPUT-FILE.
01  INPUT-RECORD        PIC X(80).

FD  OUTPUT-FILE.
01  OUTPUT-RECORD       PIC X(80).

WORKING-STORAGE SECTION.
01  WS-PROFILES-STATUS  PIC X(2).
01  WS-EOF-FLAG         PIC X VALUE 'N'.

01  WS-MESSAGE          PIC X(80).

01  WS-PROFILE-DATA.
    05 WS-FIRST-NAME     PIC X(50).
    05 WS-LAST-NAME      PIC X(50).
    05 WS-UNIVERSITY     PIC X(100).
    05 WS-MAJOR          PIC X(50).
    05 WS-GRAD-YEAR      PIC X(4).
    05 WS-ABOUT-ME       PIC X(200).

    05 WS-EXPERIENCE-TABLE.
       10 WS-EXPERIENCE OCCURS 3 TIMES INDEXED BY I.
          15 WS-EXP-TITLE    PIC X(50).
          15 WS-EXP-COMPANY  PIC X(50).
          15 WS-EXP-DATES    PIC X(50).
          15 WS-EXP-DESC     PIC X(100).
    05 WS-EXP-COUNT      PIC 9 VALUE 0.

    05 WS-EDUCATION-TABLE.
       10 WS-EDUCATION OCCURS 3 TIMES INDEXED BY J.
          15 WS-EDU-DEGREE   PIC X(50).
          15 WS-EDU-UNIV     PIC X(50).
          15 WS-EDU-YEARS    PIC X(50).
    05 WS-EDU-COUNT      PIC 9 VALUE 0.

01  WS-INPUT-BUFFER     PIC X(80).
01  WS-LOOP-FLAG        PIC X.

*> In-memory table to hold profiles before writing to file
01  WS-ALL-PROFILES-STORAGE.
    05 WS-PROFILE-LINE OCCURS 200 TIMES PIC X(250).
01  WS-LINE-INDEX       PIC 999 VALUE 0.

LINKAGE SECTION.
01  LS-USERNAME         PIC X(20).

PROCEDURE DIVISION USING LS-USERNAME.

    *> This program takes over I/O temporarily
    OPEN INPUT INPUT-FILE.
    OPEN EXTEND OUTPUT-FILE.

    PERFORM GET-REQUIRED-DATA.
    PERFORM VALIDATE-INPUT.
    PERFORM GET-OPTIONAL-ABOUT.
    PERFORM GET-EXPERIENCE.
    PERFORM GET-EDUCATION.
    PERFORM SAVE-PROFILE-DATA.

    MOVE "Profile saved successfully!" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.

    CLOSE INPUT-FILE, OUTPUT-FILE.
    GOBACK.

GET-REQUIRED-DATA SECTION.
    MOVE "--- Create/Edit Profile ---" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.

    MOVE "Enter First Name:" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.
    PERFORM READ-FROM-INPUT-FILE.
    MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-FIRST-NAME.

    MOVE "Enter Last Name:" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.
    PERFORM READ-FROM-INPUT-FILE.
    MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-LAST-NAME.

    MOVE "Enter University/College Attended:" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.
    PERFORM READ-FROM-INPUT-FILE.
    MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-UNIVERSITY.

    MOVE "Enter Major:" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.
    PERFORM READ-FROM-INPUT-FILE.
    MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-MAJOR.

    MOVE "Enter Graduation Year (YYYY):" TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.
    PERFORM READ-FROM-INPUT-FILE.
    MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-GRAD-YEAR.
    EXIT.

VALIDATE-INPUT SECTION.
    IF WS-GRAD-YEAR IS NOT NUMERIC OR FUNCTION LENGTH(WS-GRAD-YEAR) NOT = 4
        MOVE "Invalid Graduation Year. Must be 4 digits." TO WS-MESSAGE
        PERFORM DISPLAY-AND-LOG
        CLOSE INPUT-FILE, OUTPUT-FILE
        STOP RUN
    END-IF.
    EXIT.

GET-OPTIONAL-ABOUT SECTION.
    MOVE "Enter About Me (optional, max 200 chars, enter blank line to skip):"
        TO WS-MESSAGE.
    PERFORM DISPLAY-AND-LOG.
    PERFORM READ-FROM-INPUT-FILE.
    MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-ABOUT-ME.
    EXIT.

GET-EXPERIENCE SECTION.
    MOVE 'N' TO WS-LOOP-FLAG.
    SET I TO 1.
    PERFORM 3 TIMES
        IF WS-LOOP-FLAG = 'N'
            MOVE "Add Experience (optional, max 3 entries. Enter 'DONE' to finish):"
                TO WS-MESSAGE
            PERFORM DISPLAY-AND-LOG
            PERFORM READ-FROM-INPUT-FILE
            MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-INPUT-BUFFER
            IF WS-INPUT-BUFFER = "DONE" OR WS-INPUT-BUFFER = " "
                MOVE 'Y' TO WS-LOOP-FLAG
            ELSE
                ADD 1 TO WS-EXP-COUNT
                STRING "Experience #" DELIMITED BY SIZE I DELIMITED BY SIZE
                       " - Title:" DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                *> The title was the first thing entered
                MOVE WS-INPUT-BUFFER TO WS-EXP-TITLE(I)

                STRING "Experience #" DELIMITED BY SIZE I DELIMITED BY SIZE
                       " - Company/Organization:" DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                PERFORM READ-FROM-INPUT-FILE
                MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-EXP-COMPANY(I)

                STRING "Experience #" DELIMITED BY SIZE I DELIMITED BY SIZE
                       " - Dates (e.g., Summer 2024):" DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                PERFORM READ-FROM-INPUT-FILE
                MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-EXP-DATES(I)

                STRING "Experience #" DELIMITED BY SIZE I DELIMITED BY SIZE
                     " - Description (optional, max 100 chars, blank to skip):"
                     DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                PERFORM READ-FROM-INPUT-FILE
                MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-EXP-DESC(I)
                SET I UP BY 1
            END-IF
        END-IF
    END-PERFORM.
    EXIT.

GET-EDUCATION SECTION.
    MOVE 'N' TO WS-LOOP-FLAG.
    SET J TO 1.
    PERFORM 3 TIMES
        IF WS-LOOP-FLAG = 'N'
            MOVE "Add Education (optional, max 3 entries. Enter 'DONE' to finish):"
                TO WS-MESSAGE
            PERFORM DISPLAY-AND-LOG
            PERFORM READ-FROM-INPUT-FILE
            MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-INPUT-BUFFER
            IF WS-INPUT-BUFFER = "DONE" OR WS-INPUT-BUFFER = " "
                MOVE 'Y' TO WS-LOOP-FLAG
            ELSE
                ADD 1 TO WS-EDU-COUNT
                STRING "Education #" DELIMITED BY SIZE J DELIMITED BY SIZE
                       " - Degree:" DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                MOVE WS-INPUT-BUFFER TO WS-EDU-DEGREE(J)

                STRING "Education #" DELIMITED BY SIZE J DELIMITED BY SIZE
                       " - University/College:" DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                PERFORM READ-FROM-INPUT-FILE
                MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-EDU-UNIV(J)

                STRING "Education #" DELIMITED BY SIZE J DELIMITED BY SIZE
                       " - Years Attended (e.g., 2023-2025):"
                       DELIMITED BY SIZE INTO WS-MESSAGE
                PERFORM DISPLAY-AND-LOG
                PERFORM READ-FROM-INPUT-FILE
                MOVE FUNCTION TRIM(INPUT-RECORD) TO WS-EDU-YEARS(J)
                SET J UP BY 1
            END-IF
        END-IF
    END-PERFORM.
    EXIT.

SAVE-PROFILE-DATA SECTION.
    *> Step 1: Read all other user profiles into memory.
    INITIALIZE WS-ALL-PROFILES-STORAGE.
    MOVE 0 TO WS-LINE-INDEX.
    MOVE 'N' to WS-EOF-FLAG.
    OPEN INPUT PROFILES-FILE.

    IF WS-PROFILES-STATUS = "00"
        PERFORM READ-AND-FILTER-PROFILES
    END-IF.
    CLOSE PROFILES-FILE.

    *> Step 2: Add the new profile data for the current user to memory.
    ADD 1 TO WS-LINE-INDEX.
    STRING "USER:" FUNCTION TRIM(LS-USERNAME)
        INTO WS-PROFILE-LINE(WS-LINE-INDEX).

    ADD 1 TO WS-LINE-INDEX.
    STRING "FNAM:" FUNCTION TRIM(WS-FIRST-NAME)
        INTO WS-PROFILE-LINE(WS-LINE-INDEX).

    ADD 1 TO WS-LINE-INDEX.
    STRING "LNAM:" FUNCTION TRIM(WS-LAST-NAME)
        INTO WS-PROFILE-LINE(WS-LINE-INDEX).

    ADD 1 TO WS-LINE-INDEX.
    STRING "UNIV:" FUNCTION TRIM(WS-UNIVERSITY)
        INTO WS-PROFILE-LINE(WS-LINE-INDEX).

    ADD 1 TO WS-LINE-INDEX.
    STRING "MAJR:" FUNCTION TRIM(WS-MAJOR)
        INTO WS-PROFILE-LINE(WS-LINE-INDEX).

    ADD 1 TO WS-LINE-INDEX.
    STRING "GRAD:" WS-GRAD-YEAR
        INTO WS-PROFILE-LINE(WS-LINE-INDEX).

    IF WS-ABOUT-ME > " "
        ADD 1 TO WS-LINE-INDEX
        STRING "ABOU:" FUNCTION TRIM(WS-ABOUT-ME)
            INTO WS-PROFILE-LINE(WS-LINE-INDEX)
    END-IF.

    PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-EXP-COUNT
        ADD 1 TO WS-LINE-INDEX
        STRING "EXP" I ":" FUNCTION TRIM(WS-EXP-TITLE(I)) "~"
               FUNCTION TRIM(WS-EXP-COMPANY(I)) "~"
               FUNCTION TRIM(WS-EXP-DATES(I)) "~"
               FUNCTION TRIM(WS-EXP-DESC(I))
               INTO WS-PROFILE-LINE(WS-LINE-INDEX)
    END-PERFORM.

    PERFORM VARYING J FROM 1 BY 1 UNTIL J > WS-EDU-COUNT
        ADD 1 TO WS-LINE-INDEX
        STRING "EDU" J ":" FUNCTION TRIM(WS-EDU-DEGREE(J)) "~"
               FUNCTION TRIM(WS-EDU-UNIV(J)) "~"
               FUNCTION TRIM(WS-EDU-YEARS(J))
               INTO WS-PROFILE-LINE(WS-LINE-INDEX)
    END-PERFORM.

    ADD 1 TO WS-LINE-INDEX.
    MOVE "ENDPROFILE" TO WS-PROFILE-LINE(WS-LINE-INDEX).

    *> Step 3: Write the entire memory table back to the file.
    OPEN OUTPUT PROFILES-FILE.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-LINE-INDEX
        WRITE PROFILE-RECORD FROM WS-PROFILE-LINE(I)
    END-PERFORM.
    CLOSE PROFILES-FILE.
    EXIT.

READ-AND-FILTER-PROFILES SECTION.
    PERFORM UNTIL WS-EOF-FLAG = 'Y'
        READ PROFILES-FILE
            AT END
                MOVE 'Y' TO WS-EOF-FLAG
            NOT AT END
                IF PROFILE-RECORD(1:5) = "USER:" AND
                   FUNCTION TRIM(PROFILE-RECORD(6:)) =
                   FUNCTION TRIM(LS-USERNAME)
                    PERFORM SKIP-UNTIL-ENDPROFILE
                ELSE
                    ADD 1 TO WS-LINE-INDEX
                    MOVE PROFILE-RECORD TO WS-PROFILE-LINE(WS-LINE-INDEX)
                    PERFORM COPY-UNTIL-ENDPROFILE
                END-IF
    END-PERFORM.
    EXIT.

COPY-UNTIL-ENDPROFILE SECTION.
    MOVE 'N' TO WS-LOOP-FLAG.
    PERFORM UNTIL WS-LOOP-FLAG = 'Y' OR WS-EOF-FLAG = 'Y'
        READ PROFILES-FILE
            AT END
                MOVE 'Y' TO WS-EOF-FLAG
                MOVE 'Y' TO WS-LOOP-FLAG
            NOT AT END
                ADD 1 TO WS-LINE-INDEX
                MOVE PROFILE-RECORD TO
                    WS-PROFILE-LINE(WS-LINE-INDEX)
                IF PROFILE-RECORD = "ENDPROFILE"
                    MOVE 'Y' TO WS-LOOP-FLAG
                END-IF
    END-PERFORM.
    EXIT.

SKIP-UNTIL-ENDPROFILE SECTION.
    MOVE 'N' TO WS-LOOP-FLAG.
    PERFORM UNTIL WS-LOOP-FLAG = 'Y' OR WS-EOF-FLAG = 'Y'
        READ PROFILES-FILE
            AT END
                MOVE 'Y' TO WS-EOF-FLAG
                MOVE 'Y' TO WS-LOOP-FLAG
            NOT AT END
                IF PROFILE-RECORD = "ENDPROFILE"
                    MOVE 'Y' TO WS-LOOP-FLAG
                END-IF
    END-PERFORM.
    EXIT.

DISPLAY-AND-LOG SECTION.
    DISPLAY WS-MESSAGE.
    MOVE WS-MESSAGE TO OUTPUT-RECORD.
    WRITE OUTPUT-RECORD.
    INITIALIZE OUTPUT-RECORD.
    EXIT.

READ-FROM-INPUT-FILE SECTION.
    INITIALIZE INPUT-RECORD.
    READ INPUT-FILE
        AT END
            MOVE 'Y' TO WS-EOF-FLAG
            MOVE "End of input file reached unexpectedly." to WS-MESSAGE
            PERFORM DISPLAY-AND-LOG
            CLOSE INPUT-FILE, OUTPUT-FILE
            STOP RUN
    END-READ.
    EXIT.
